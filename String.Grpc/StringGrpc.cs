// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: string.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace String.Grpc {
  public static partial class String
  {
    static readonly string __ServiceName = "String.Grpc.String";

    static readonly grpc::Marshaller<global::String.Grpc.UpperCaseRequest> __Marshaller_String_Grpc_UpperCaseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::String.Grpc.UpperCaseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::String.Grpc.UpperCaseResult> __Marshaller_String_Grpc_UpperCaseResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::String.Grpc.UpperCaseResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::String.Grpc.LowerCaseRequest> __Marshaller_String_Grpc_LowerCaseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::String.Grpc.LowerCaseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::String.Grpc.LowerCaseResult> __Marshaller_String_Grpc_LowerCaseResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::String.Grpc.LowerCaseResult.Parser.ParseFrom);

    static readonly grpc::Method<global::String.Grpc.UpperCaseRequest, global::String.Grpc.UpperCaseResult> __Method_UpperCase = new grpc::Method<global::String.Grpc.UpperCaseRequest, global::String.Grpc.UpperCaseResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpperCase",
        __Marshaller_String_Grpc_UpperCaseRequest,
        __Marshaller_String_Grpc_UpperCaseResult);

    static readonly grpc::Method<global::String.Grpc.LowerCaseRequest, global::String.Grpc.LowerCaseResult> __Method_LowerCase = new grpc::Method<global::String.Grpc.LowerCaseRequest, global::String.Grpc.LowerCaseResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LowerCase",
        __Marshaller_String_Grpc_LowerCaseRequest,
        __Marshaller_String_Grpc_LowerCaseResult);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::String.Grpc.StringReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of String</summary>
    public abstract partial class StringBase
    {
      public virtual global::System.Threading.Tasks.Task<global::String.Grpc.UpperCaseResult> UpperCase(global::String.Grpc.UpperCaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::String.Grpc.LowerCaseResult> LowerCase(global::String.Grpc.LowerCaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for String</summary>
    public partial class StringClient : grpc::ClientBase<StringClient>
    {
      /// <summary>Creates a new client for String</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public StringClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for String that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public StringClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected StringClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected StringClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::String.Grpc.UpperCaseResult UpperCase(global::String.Grpc.UpperCaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpperCase(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::String.Grpc.UpperCaseResult UpperCase(global::String.Grpc.UpperCaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpperCase, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::String.Grpc.UpperCaseResult> UpperCaseAsync(global::String.Grpc.UpperCaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpperCaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::String.Grpc.UpperCaseResult> UpperCaseAsync(global::String.Grpc.UpperCaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpperCase, null, options, request);
      }
      public virtual global::String.Grpc.LowerCaseResult LowerCase(global::String.Grpc.LowerCaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LowerCase(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::String.Grpc.LowerCaseResult LowerCase(global::String.Grpc.LowerCaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LowerCase, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::String.Grpc.LowerCaseResult> LowerCaseAsync(global::String.Grpc.LowerCaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LowerCaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::String.Grpc.LowerCaseResult> LowerCaseAsync(global::String.Grpc.LowerCaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LowerCase, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override StringClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new StringClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(StringBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_UpperCase, serviceImpl.UpperCase)
          .AddMethod(__Method_LowerCase, serviceImpl.LowerCase).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, StringBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_UpperCase, serviceImpl.UpperCase);
      serviceBinder.AddMethod(__Method_LowerCase, serviceImpl.LowerCase);
    }

  }
}
#endregion
